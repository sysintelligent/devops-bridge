package api

import (
	"context"

	"github.com/sysintelligent/bdc-bridge/server/kubernetes"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/types/known/emptypb"
)

// RegisterGRPCServices registers all gRPC services with the server
func RegisterGRPCServices(server *grpc.Server, k8sClient *kubernetes.Client) {
	// Register the application service
	RegisterApplicationServiceServer(server, &applicationServiceServer{
		k8sClient: k8sClient,
	})
}

// applicationServiceServer implements the ApplicationService gRPC service
type applicationServiceServer struct {
	// This would normally be generated by protoc
	UnimplementedApplicationServiceServer
	k8sClient *kubernetes.Client
}

// UnimplementedApplicationServiceServer is a placeholder for the generated code
type UnimplementedApplicationServiceServer struct{}

// RegisterApplicationServiceServer is a placeholder for the generated code
func RegisterApplicationServiceServer(server *grpc.Server, service ApplicationServiceServer) {
	// This would normally be generated by protoc
}

// ApplicationServiceServer is the server API for ApplicationService service.
type ApplicationServiceServer interface {
	// GetApplications returns a list of all applications
	GetApplications(context.Context, *emptypb.Empty) (*ApplicationList, error)
	// GetApplication returns a single application by name
	GetApplication(context.Context, *ApplicationRequest) (*Application, error)
	// CreateApplication creates a new application
	CreateApplication(context.Context, *Application) (*Application, error)
	// UpdateApplication updates an existing application
	UpdateApplication(context.Context, *Application) (*Application, error)
	// DeleteApplication deletes an application
	DeleteApplication(context.Context, *ApplicationRequest) (*emptypb.Empty, error)
}

// ApplicationList is a list of applications
type ApplicationList struct {
	// Applications is the list of applications
	Applications []*Application
}

// ApplicationRequest is a request for a specific application
type ApplicationRequest struct {
	// Name is the name of the application
	Name string
}

// Application is a Kubernetes application
type Application struct {
	// Name is the name of the application
	Name string
	// Namespace is the Kubernetes namespace
	Namespace string
	// Status is the current status of the application
	Status string
	// SyncStatus is the current sync status of the application
	SyncStatus string
}

// GetApplications returns a list of all applications
func (s *applicationServiceServer) GetApplications(ctx context.Context, req *emptypb.Empty) (*ApplicationList, error) {
	// Get applications from Kubernetes
	apps, err := s.k8sClient.GetApplications()
	if err != nil {
		return nil, status.Errorf(codes.Internal, "Failed to get applications: %v", err)
	}

	// Convert to gRPC response
	var result ApplicationList
	for _, app := range apps {
		result.Applications = append(result.Applications, &Application{
			Name:       app.Name,
			Namespace:  app.Namespace,
			Status:     string(app.Status),
			SyncStatus: string(app.SyncStatus),
		})
	}

	return &result, nil
}

// GetApplication returns a single application by name
func (s *applicationServiceServer) GetApplication(ctx context.Context, req *ApplicationRequest) (*Application, error) {
	// Get application from Kubernetes
	app, err := s.k8sClient.GetApplication(req.Name)
	if err != nil {
		return nil, status.Errorf(codes.NotFound, "Application not found: %v", err)
	}

	// Convert to gRPC response
	return &Application{
		Name:       app.Name,
		Namespace:  app.Namespace,
		Status:     string(app.Status),
		SyncStatus: string(app.SyncStatus),
	}, nil
}

// CreateApplication creates a new application
func (s *applicationServiceServer) CreateApplication(ctx context.Context, req *Application) (*Application, error) {
	// Convert to Kubernetes application
	app := &kubernetes.Application{
		Name:       req.Name,
		Namespace:  req.Namespace,
		Status:     kubernetes.ApplicationStatus(req.Status),
		SyncStatus: kubernetes.SyncStatus(req.SyncStatus),
	}

	// Create application in Kubernetes
	if err := s.k8sClient.CreateApplication(app); err != nil {
		return nil, status.Errorf(codes.Internal, "Failed to create application: %v", err)
	}

	return req, nil
}

// UpdateApplication updates an existing application
func (s *applicationServiceServer) UpdateApplication(ctx context.Context, req *Application) (*Application, error) {
	// Convert to Kubernetes application
	app := &kubernetes.Application{
		Name:       req.Name,
		Namespace:  req.Namespace,
		Status:     kubernetes.ApplicationStatus(req.Status),
		SyncStatus: kubernetes.SyncStatus(req.SyncStatus),
	}

	// Update application in Kubernetes
	if err := s.k8sClient.UpdateApplication(req.Name, app); err != nil {
		return nil, status.Errorf(codes.Internal, "Failed to update application: %v", err)
	}

	return req, nil
}

// DeleteApplication deletes an application
func (s *applicationServiceServer) DeleteApplication(ctx context.Context, req *ApplicationRequest) (*emptypb.Empty, error) {
	// Delete application from Kubernetes
	if err := s.k8sClient.DeleteApplication(req.Name); err != nil {
		return nil, status.Errorf(codes.Internal, "Failed to delete application: %v", err)
	}

	return &emptypb.Empty{}, nil
}
